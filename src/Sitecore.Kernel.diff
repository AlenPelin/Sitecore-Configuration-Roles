From 18f10e4a7e5bebcc9e363f0a4ba53b47ea251f2a Mon Sep 17 00:00:00 2001
From: AlenPelin <AlenPelin@sitecore.net>
Date: Thu, 26 Nov 2015 16:16:17 +1100
Subject: [PATCH] Implemented

---
 Configuration/ConfigPatcher.cs      |   3 +-
 Configuration/ConfigurationRoles.cs | 190 ++++++++++++++++++++++++++++++++++++
 Configuration/Factory.cs            |   4 +
 Data/Fields/XmlDeltas.cs            |   2 +-
 Sitecore.Kernel.csproj              |   6 +-
 Xml/Patch/Framework.cs              |   7 ++
 Xml/Patch/XmlPatchUtils.cs          |  57 ++++++++++-
 Xml/Patch/XmlPatcher.cs             |   4 +-
 8 files changed, 266 insertions(+), 7 deletions(-)
 create mode 100644 Configuration/ConfigurationRoles.cs

diff --git a/Configuration/ConfigPatcher.cs b/Configuration/ConfigPatcher.cs
index a960b5d..5df6e36 100644
--- a/Configuration/ConfigPatcher.cs
+++ b/Configuration/ConfigPatcher.cs
@@ -19,9 +19,10 @@ namespace Sitecore.Configuration
     /// </summary>
     public const string ConfigurationNamespace = "http://www.sitecore.net/xmlconfig/";
     public const string SetNamespace = "http://www.sitecore.net/xmlconfig/set/";
+    public const string RoleNamespace = "http://www.sitecore.net/xmlconfig/role/";
 
     XmlNode _root;
-    XmlPatcher _patcher = new XmlPatcher(SetNamespace, ConfigurationNamespace);
+    XmlPatcher _patcher = new XmlPatcher(RoleNamespace, SetNamespace, ConfigurationNamespace);
 
     /// <summary>
     /// Initializes a new instance of the <see cref="ConfigPatcher"/> class.
diff --git a/Configuration/ConfigurationRoles.cs b/Configuration/ConfigurationRoles.cs
new file mode 100644
index 0000000..1352ab6
--- /dev/null
+++ b/Configuration/ConfigurationRoles.cs
@@ -0,0 +1,190 @@
+namespace Sitecore.Configuration
+{
+  using System;
+  using System.Collections.Generic;
+  using System.Configuration;
+  using System.Linq;
+  using System.Text.RegularExpressions;
+  using System.Threading;
+  using System.Xml;
+  using Sitecore.Diagnostics;
+  using Sitecore.Xml.Patch;
+
+  /// <summary>
+  /// The configuration roles.
+  /// </summary>
+  public static class ConfigurationRoles
+  {
+    [CanBeNull]
+    private static string[] definedRoles;
+
+    /// <summary>
+    /// List of defined roles.
+    /// </summary>
+    /// <value>
+    /// The defined roles.
+    /// </value>
+    [NotNull]
+    public static IEnumerable<string> DefinedRoles
+    {
+      get
+      {
+        return (definedRoles ?? new string[0]).ToArray();
+      }
+    }
+
+    [CanBeNull]
+    internal static string DefinedRolesSource { get; private set; }
+
+    [CanBeNull]
+    internal static string DefinedRolesErrorSource { get; private set; }
+
+    [CanBeNull]
+    private static string DefinedRolesErrorMessage { get; set; }
+
+    internal static void LoadAppSetting()
+    {
+      var roleDefine = System.Configuration.ConfigurationManager.AppSettings["role:define"];
+      if (!string.IsNullOrEmpty(roleDefine))
+      {
+        ConfigurationRoles.DefineRolesOnce(roleDefine, "web.config");
+      }
+    }
+
+    internal static void Validate()
+    {
+      if (string.IsNullOrEmpty(DefinedRolesErrorSource) && string.IsNullOrEmpty(DefinedRolesErrorMessage))
+      {
+        return;
+      }
+
+      throw new ConfigurationErrorsException(DefinedRolesErrorMessage, DefinedRolesErrorSource, 0);
+    }
+
+    internal static bool ProcessRolesNamespace([NotNull] IXmlNode attribute)
+    {
+      Assert.ArgumentNotNull(attribute, "node");
+      Assert.ArgumentCondition(attribute.NodeType == XmlNodeType.Attribute, "attribute", "The attribute node is not an XmlNodeType.Attribute");
+
+      var name = attribute.LocalName;
+      var value = attribute.Value;
+      switch (name)
+      {
+        case "d":
+        case "define":
+          if (!string.IsNullOrEmpty(value))
+          {
+            Sitecore.Configuration.ConfigurationRoles.DefineRolesOnce(value, attribute);
+
+            return false;
+          }
+
+          break;
+
+        case "r":
+        case "require":
+          if (!string.IsNullOrEmpty(value))
+          {
+            var words = value.Split("|;,".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
+
+            return words.Any(word => Sitecore.Configuration.ConfigurationRoles.DefinedRoles.Contains(word));
+          }
+
+          break;
+      }
+
+      return true;
+    }
+
+    private static void DefineRolesOnce([NotNull] string value, [NotNull] IXmlNode node)
+    {
+      Assert.ArgumentNotNull(value, "value");
+      Assert.ArgumentNotNull(node, "node");
+
+      var source = (IXmlSource)node;
+      var sourceName = source.SourceName;
+
+      DefineRolesOnce(value, sourceName);
+    }
+
+    private static void DefineRolesOnce([NotNull] string value, [NotNull] string sourceName)
+    {
+      Assert.ArgumentNotNull(value, "value");
+      Assert.ArgumentNotNull(sourceName, "sourceName");
+
+      if (definedRoles != null && DefinedRolesSource != sourceName)
+      {
+        DefinedRolesErrorSource = sourceName;
+        DefinedRolesErrorMessage = string.Format(
+          "Current set of roles defined in the \"{0}\" file was attempted to be modified in the \"{1}\" file. " +
+          "This is not allowed to prevent unintended configuration changes. " +
+          "If roles from both files are valid, they need to be merged into a single file.",
+          DefinedRolesSource,
+          DefinedRolesErrorSource);
+
+        return;
+      }
+
+      var roles = value.Split("|,;".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
+        .Select(x => x.ToLowerInvariant())
+        .Distinct()
+        .ToList();
+
+      // expand some-role-1 into "some-role|some-role-1" and "dedicated-publishing" to "publishing|publishing-1|dedicated-publishing"
+      var regex = new Regex(@"([^|;,]+)\-(\d+)$");
+      var rolesCopy = roles.ToArray();
+      var shift = 0;
+      for (var i = 0; i < rolesCopy.Length; i++)
+      {
+        var role = rolesCopy[i];
+        var match = regex.Match(role);
+        if (match.Success && match.Groups.Count >= 1)
+        {
+          var newRole = match.Groups[1].Value;
+          if (!roles.Contains(newRole))
+          {
+            roles.Insert(i + shift++, newRole);
+          }
+        }
+        else if (role == "dedicated-publishing")
+        {
+          if (!roles.Contains("publishing"))
+          {
+            roles.Insert(i + shift++, "publishing");
+          }
+
+          if (!roles.Contains("publishing-1"))
+          {
+            roles.Insert(i + shift++, "publishing-1");
+          }
+        }
+      }
+
+      var error = ValidateRoles(roles);
+      if (!string.IsNullOrEmpty(error))
+      {
+        DefinedRolesErrorMessage = error;
+        DefinedRolesErrorSource = sourceName;
+
+        return;
+      }
+
+      definedRoles = roles.ToArray();
+      DefinedRolesSource = sourceName;
+    }
+
+    private static string ValidateRoles(ICollection<string> roles)
+    {
+      if (roles.Contains("delivery"))
+      {
+        var incompatibleRole = roles.FirstOrDefault(x => x != "delivery" && !x.StartsWith("delivery-"));
+        if (incompatibleRole != null)
+        {
+          return string.Format("The delivery role is specified alongside with {0} which is not supported.", incompatibleRole);
+        }
+      }
+
+      return null;
+    }
+  }
+}
\ No newline at end of file
diff --git a/Configuration/Factory.cs b/Configuration/Factory.cs
index 73b16ac..61f91a7 100644
--- a/Configuration/Factory.cs
+++ b/Configuration/Factory.cs
@@ -1583,6 +1583,8 @@ namespace Sitecore.Configuration
 
                 config.AppendChild(config.ImportNode(root, true));
 
+                ConfigurationRoles.LoadAppSetting();
+
                 ExpandIncludeFiles(config.DocumentElement, new Hashtable());
 
                 LoadAutoIncludeFiles(config.DocumentElement);
@@ -1591,6 +1593,8 @@ namespace Sitecore.Configuration
 
                 Factory.configuration = config;
 
+                ConfigurationRoles.Validate();
+
                 return Factory.configuration;
             }
         }
diff --git a/Data/Fields/XmlDeltas.cs b/Data/Fields/XmlDeltas.cs
index 6831c1c..4414bc2 100644
--- a/Data/Fields/XmlDeltas.cs
+++ b/Data/Fields/XmlDeltas.cs
@@ -110,7 +110,7 @@ namespace Sitecore.Data.Fields
       XmlNode baseRoot = baseDocument.DocumentElement;
       Assert.IsNotNull(baseRoot, "Xml document root element is missing (base)");
 
-      new XmlPatcher("s", "p").Merge(baseRoot, patchRoot);
+      new XmlPatcher("r", "s", "p").Merge(baseRoot, patchRoot);
       return baseRoot.OuterXml;
     }
 
diff --git a/Sitecore.Kernel.csproj b/Sitecore.Kernel.csproj
index 44a9a84..1daa81a 100644
--- a/Sitecore.Kernel.csproj
+++ b/Sitecore.Kernel.csproj
@@ -59,14 +59,15 @@
     <TargetFrameworkProfile />
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
-    <OutputPath>bin\</OutputPath>
+    <OutputPath>..\..\..\..\..\inetpub\wwwroot\poc447737-cd\Website\bin\</OutputPath>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
     <BaseAddress>285212672</BaseAddress>
     <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
     <ConfigurationOverrideFile>
     </ConfigurationOverrideFile>
     <DefineConstants>TRACE;DEBUG;ASSERTIONS</DefineConstants>
-    <DocumentationFile>bin\Sitecore.Kernel.XML</DocumentationFile>
+    <DocumentationFile>
+    </DocumentationFile>
     <DebugSymbols>true</DebugSymbols>
     <FileAlignment>4096</FileAlignment>
     <NoStdLib>false</NoStdLib>
@@ -5012,6 +5013,7 @@
       <SubType>Code</SubType>
     </Compile>
     <Compile Include="Workflows\WorkflowUIHelper.cs" />
+    <Compile Include="Configuration\ConfigurationRoles.cs" />
     <Compile Include="Xml\Patch\ElementIdentification.cs" />
     <Compile Include="Xml\Patch\XmlDiffUtils.cs" />
     <Compile Include="Xml\Patch\XmlElementContext.cs" />
diff --git a/Xml/Patch/Framework.cs b/Xml/Patch/Framework.cs
index a292d58..796428b 100644
--- a/Xml/Patch/Framework.cs
+++ b/Xml/Patch/Framework.cs
@@ -23,6 +23,13 @@ namespace Sitecore.Xml.Patch
     /// </summary>
     /// <value>The set namespace.</value>
     public string SetNamespace { get; set; }
+
+    /// <summary>
+    /// Gets or sets the role namespace.
+    /// </summary>
+    /// <value>The role namespace.</value>
+    [NotNull]
+    public string RoleNamespace { get; set; }
   }
 
   /// <summary>
diff --git a/Xml/Patch/XmlPatchUtils.cs b/Xml/Patch/XmlPatchUtils.cs
index 4f4eb71..edb19c8 100644
--- a/Xml/Patch/XmlPatchUtils.cs
+++ b/Xml/Patch/XmlPatchUtils.cs
@@ -101,7 +101,7 @@ namespace Sitecore.Xml.Patch
       Assert.ArgumentNotNull(patch, "patch");
       Assert.ArgumentNotNull(ns, "ns");
 
-      IEnumerable<IXmlNode> attributes = patch.GetAttributes().Where(a => a.NamespaceURI != ns.PatchNamespace && a.NamespaceURI != "http://www.w3.org/2000/xmlns/");
+      IEnumerable<IXmlNode> attributes = patch.GetAttributes().Where(a => a.NamespaceURI != ns.PatchNamespace && (a.NamespaceURI != ns.RoleNamespace || a.LocalName == "define") && a.NamespaceURI != "http://www.w3.org/2000/xmlns/");
       IEnumerable<IXmlNode> values = attributes.Select(a =>
       {
         string targetNamespace = a.NamespaceURI == ns.SetNamespace ? string.Empty : a.NamespaceURI;
@@ -155,6 +155,31 @@ namespace Sitecore.Xml.Patch
         return;
       }
 
+      var exit = false;
+      foreach (var attribute in patch.GetAttributes())
+      {
+        if (exit)
+        {
+          continue;
+        }
+
+        if (attribute.NamespaceURI == ns.RoleNamespace && !Configuration.ConfigurationRoles.ProcessRolesNamespace(attribute))
+        {
+          // we need to finish enumerating attributes to avoid reader problem
+          exit = true;
+        }
+      }
+
+      if (exit)
+      {
+        foreach(var node in patch.GetChildren())
+        {
+          // we need to get children to avoid reader problem
+        }
+
+        return;
+      }
+
       CopyAttributes(target, patch, ns);
 
       MergeChildren(target, patch, ns, false);
@@ -234,12 +259,18 @@ namespace Sitecore.Xml.Patch
       Assert.ArgumentNotNull(patch, "patch");
       Assert.ArgumentNotNull(ns, "ns");
 
+      var exit = false;
       string savedComment = null;
       var pendingOperations = new Stack<InsertOperation>();
 
       // copy child nodes
       foreach (IXmlElement node in patch.GetChildren())
-      {
+      {      
+        if(exit)
+        {
+          continue;
+        }
+
         if (node.NodeType == XmlNodeType.Text)
         {
           target.InnerText = node.Value;
@@ -270,6 +301,23 @@ namespace Sitecore.Xml.Patch
 
         foreach (IXmlNode attribute in node.GetAttributes())
         {
+          if (exit)
+          {
+            continue;
+          }
+
+          if (attribute.NamespaceURI == ns.RoleNamespace)
+          {
+            if(!Configuration.ConfigurationRoles.ProcessRolesNamespace(node))
+            {
+              // we need to finish enumerating attributes to avoid reader problem
+              exit = true;
+              pendingOperations.Clear();
+            }
+
+            continue;
+          }
+
           if (attribute.NamespaceURI == ns.PatchNamespace)
           {
             switch (attribute.LocalName)
@@ -317,6 +365,11 @@ namespace Sitecore.Xml.Patch
           }
         }
 
+        if (exit)
+        {
+          continue;
+        }
+
         var nsManager = new XmlNamespaceManager(new NameTable());
 
         var predicateBuilder = new StringBuilder();
diff --git a/Xml/Patch/XmlPatcher.cs b/Xml/Patch/XmlPatcher.cs
index 3122130..1530b8e 100644
--- a/Xml/Patch/XmlPatcher.cs
+++ b/Xml/Patch/XmlPatcher.cs
@@ -16,12 +16,14 @@ namespace Sitecore.Xml.Patch
     /// <summary>
     /// Initializes a new instance of the <see cref="XmlPatcher"/> class.
     /// </summary>
+    /// <param name="roleNamespace">The role namespace.</param>
     /// <param name="setNamespace">The set namespace.</param>
     /// <param name="patchNamespace">The config namespace.</param>
-    public XmlPatcher(string setNamespace, string patchNamespace)
+    public XmlPatcher(string roleNamespace, string setNamespace, string patchNamespace)
     {
       this.ns = new XmlPatchNamespaces
       {
+        RoleNamespace = roleNamespace,
         SetNamespace = setNamespace,
         PatchNamespace = patchNamespace
       };
-- 
2.5.0.windows.1

